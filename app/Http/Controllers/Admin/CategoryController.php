<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\CategoryRequest;
use App\Models\Category;
use App\Models\Product;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Support\Facades\DB;

class CategoryController extends Controller
{
    /**
     * Display a listing of categories with product counts.
     */
    public function index(): View
    {
        $categories = Category::withCount('products')
            ->orderBy('name')
            ->paginate(15);

        return view('admin.categories.index', compact('categories'));
    }

    /**
     * Show the form for creating a new category.
     */
    public function create(): View
    {
        return view('admin.categories.create');
    }

    /**
     * Store a newly created category in storage.
     */
    public function store(CategoryRequest $request): RedirectResponse
    {
        try {
            $validated = $request->validated();
            
            // If no slug provided, it will be auto-generated by the model
            if (empty($validated['slug'])) {
                unset($validated['slug']);
            }

            $category = Category::create($validated);

            return redirect()
                ->route('admin.categories.index')
                ->with('success', "Category '{$category->name}' has been created successfully.");
        } catch (\Exception $e) {
            return redirect()
                ->back()
                ->withInput()
                ->with('error', 'Failed to create category. Please try again.');
        }
    }

    /**
     * Display the specified category.
     */
    public function show(Category $category): View
    {
        $category->loadCount('products');
        
        $products = $category->products()
            ->select(['id', 'name', 'slug', 'price', 'short_description', 'image_path', 'created_at'])
            ->orderBy('name')
            ->paginate(12);

        return view('admin.categories.show', compact('category', 'products'));
    }

    /**
     * Show the form for editing the specified category.
     */
    public function edit(Category $category): View
    {
        $category->loadCount('products');
        
        return view('admin.categories.edit', compact('category'));
    }

    /**
     * Update the specified category in storage.
     */
    public function update(CategoryRequest $request, Category $category): RedirectResponse
    {
        try {
            $validated = $request->validated();
            
            // If no slug provided, it will be auto-generated by the model if name changed
            if (empty($validated['slug'])) {
                unset($validated['slug']);
            }

            $category->update($validated);

            return redirect()
                ->route('admin.categories.index')
                ->with('success', "Category '{$category->name}' has been updated successfully.");
        } catch (\Exception $e) {
            return redirect()
                ->back()
                ->withInput()
                ->with('error', 'Failed to update category. Please try again.');
        }
    }

    /**
     * Remove the specified category from storage.
     */
    public function destroy(Category $category): RedirectResponse
    {
        try {
            DB::transaction(function () use ($category) {
                $productCount = $category->products()->count();
                
                if ($productCount > 0) {
                    // Reassign products to null category (uncategorized)
                    $category->products()->update(['category_id' => null]);
                }
                
                $categoryName = $category->name;
                $category->delete();
                
                session()->flash('success', "Category '{$categoryName}' has been deleted successfully." . 
                    ($productCount > 0 ? " {$productCount} products have been moved to uncategorized." : ''));
            });

            return redirect()->route('admin.categories.index');
        } catch (\Exception $e) {
            return redirect()
                ->back()
                ->with('error', 'Failed to delete category. Please try again.');
        }
    }

    /**
     * Show products that need category reassignment before deletion.
     */
    public function confirmDelete(Category $category): View
    {
        $category->loadCount('products');
        
        $products = $category->products()
            ->select(['id', 'name', 'slug', 'price', 'image_path'])
            ->orderBy('name')
            ->take(10)
            ->get();

        $otherCategories = Category::where('id', '!=', $category->id)
            ->orderBy('name')
            ->get(['id', 'name']);

        return view('admin.categories.confirm-delete', compact('category', 'products', 'otherCategories'));
    }

    /**
     * Reassign products to another category before deletion.
     */
    public function reassignAndDelete(Request $request, Category $category): RedirectResponse
    {
        $request->validate([
            'reassign_to' => 'nullable|exists:categories,id',
            'action' => 'required|in:reassign,uncategorize',
        ]);

        try {
            DB::transaction(function () use ($request, $category) {
                $productCount = $category->products()->count();
                
                if ($productCount > 0) {
                    if ($request->action === 'reassign' && $request->reassign_to) {
                        $targetCategory = Category::findOrFail($request->reassign_to);
                        $category->products()->update(['category_id' => $request->reassign_to]);
                        $message = "Category '{$category->name}' has been deleted. {$productCount} products have been moved to '{$targetCategory->name}'.";
                    } else {
                        $category->products()->update(['category_id' => null]);
                        $message = "Category '{$category->name}' has been deleted. {$productCount} products have been moved to uncategorized.";
                    }
                } else {
                    $message = "Category '{$category->name}' has been deleted successfully.";
                }
                
                $category->delete();
                session()->flash('success', $message);
            });

            return redirect()->route('admin.categories.index');
        } catch (\Exception $e) {
            return redirect()
                ->back()
                ->with('error', 'Failed to delete category. Please try again.');
        }
    }
}